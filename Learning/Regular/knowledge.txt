- 每个字符附带着额外的Unicode属性信息，所以为什么\p{Space}可以表示空白属性的字符，\p{Digit}可以表示数字，\p{Hex}可以表示十六进制字符[0-9A-Fa-f]
- \p用于匹配包含某项属性的字符，\P用于匹配不包含某项属性的字符
- (.)\1 匹配类似于aa、bb这样的字符
- 用反斜线+数字表示相应的捕获组，\1、\2
- 可以使用\g3、\g{3}来表示\3
- 编号为：依次点算左括号的序号即可((()())())，即绝对编号
- 相对反向引用：
    1. \g{-1}，只能够\g模式下用（可以\g-1，但不能\-1），
    2. 好处是相对的，相对于\g的位置，这样新增加一个捕获组就不需要重写所有的捕获组编号，因为其使用的是相对于自己的位置，而不是正向的绝对编号
- 择一匹配：|
    1. ( |\t)+：匹配出现一次空格、制表符或两者混合的字符串，像这种用字符集来做效率会更高
    2. ( +|\t+)：跟上面的区别是只能全是空格或全是制表符
    3. /fred(and|or)barney/ 比 /(fredandbarney|fredorbarney)/的效率高
- 字符集: []
    1. 为了方便起见，可以用-表示始末范围：[a-cw-z]
    2. ASCII字符集：[\000-\177]：八进制177==十进制127
    3. 脱字符（caret）：在字符集开头地方加上^表示这些字符除外！要转义表示原来意思
    4. /HAL-[0-9]+/：连字符在字符集外不需要转义
    5. 字符集的简写：引入Unicode后，某些简写的意义跟想象的不太一样。TODO:sublime是否有这种Unicode意义
    6. \d可以表示很多有数字意义的字符
    7. 要严格按照ASCII来匹配字符集时，可以用修饰符/a来实现。例如：/HAL-[\d]+/a
    8. \s匹配任意空白符≈\p{Space}：ASCII中[\f\t\n\r ]（换页FF\f，换行LF\n，回车CR\r）
    9. 即使在Unicode范围内：\s也不会匹配下一行NEXT LINE即NEL，垂直制表符LINE TABULATION，不间断空格NO-BREAK SPACE。注意NEL为0x85，\n即LINE FEED (LF)为0x0A
    10. \h匹配水平的空白符（包括\t），\v匹配垂直的空白符。[\h\v]等同于\p{Space}，确实比\s匹配得多。
    11. Perl 5.10引入了\R匹配表示断行的那个字符。不管\r\n还是\n，或者其他Unicode里面表示断行的字符，无论DOS还是Unix风格
    12. \w表示“单词”字符，Unicode对\w扩展了超过100,000个字符
    13. Unicode的属性跟名称参考：http://perldoc.perl.org/perluniprops.html
    14. 很多情况下，应采用范围明确的、可维护性的模式来定义字符集，避免一味采用简写引起不必要错误
    15. 反义简写：\D、\W、\S——非数字，单词，空白
    16. [\d\D]可以匹配任何字符，包括换行。而[^\d\D]什么都不会匹配，另外包含的也不匹配[^\d\D]perl也是什么都不匹配